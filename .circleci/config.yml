version: 2.1

orbs:
  python: circleci/python@0.2.1

  splunk-release:
    executors:
      python37:
        docker:
          - image: circleci/python:3.7
    commands:
      tag:
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
          tag_level:
            description: Tag level
            type: string
        steps:
          - run:
              name: TAG
              command: |
                git remote set-url origin https://<<parameters.gh_user>>:<<parameters.gh_token>>@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
                ./semtag <<parameters.tag_level>>
      merge-to-main:
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
        steps:
          - run:
              name: Merge
              command: |
                git remote set-url origin https://<<parameters.gh_user>>:<<parameters.gh_token>>@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
                git config --global user.email "addonreleasesrv@splunk.com"
                git config --global user.name "Add on release service"
                git pull origin main
                git merge main -m "Merge from main"
                git checkout main
                git merge develop
                git push
    jobs:
      tag:
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
          tag_level:
            description: Tag level
            type: string
        executor: python37
        steps:
          - checkout
          - tag:
              tag_level: <<parameters.tag_level>>
              gh_user: <<parameters.gh_user>>
              gh_token: <<parameters.gh_token>>
      merge-to-main:
        executor: python37
        parameters:
          gh_user:
            description: Git Hub username
            type: string
          gh_token:
            description: Git Hub token
            type: string
        steps:
          - checkout
          - merge-to-main:
              gh_user: <<parameters.gh_user>>
              gh_token: <<parameters.gh_token>>

executors:
  linux:
    machine:
      image: ubuntu-1604:201903-01
  macos:
    macos:
      xcode: 11.4
jobs:
  build:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache:
          keys:
            - poetry-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Install Tools
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - run:
          name: Build
          command: |
            source $HOME/.poetry/env
            poetry install
            poetry run poetry-dynamic-versioning
            poetry build
      - save_cache:
          key: poetry-cache-{{ checksum "poetry.lock" }}
          paths:
            - ~/.cache/poetry
      - store_artifacts:
          path: dist
      - store_artifacts:
          path: output
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - dist
            - output

  semgrep:
    environment:
      SEMGREP_REPO_URL: << pipeline.project.git_url >>
      SEMGREP_BRANCH: << pipeline.git.branch >>
    docker:
      - image: returntocorp/semgrep-agent:v1
        user: root
    steps:
      - checkout
      - run:
          name: "Install Dependencies"
          command: |
            pip3 install --upgrade semgrep
      - run:
          name: "Semgrep Scan"
          no_output_timeout: 1h
          command: |
            export SEMGREP_REPO_NAME=splunk/${CIRCLE_PROJECT_REPONAME}
            python -m semgrep_agent --publish-deployment ${SEMGREP_DEPLOYMENT_ID} --publish-token ${SEMGREP_PUBLISH_TOKEN}
            # Generate the Semgrep Dashboard URL
            export REPO_BRANCH=$(echo "<< pipeline.git.branch >>")
            DASHBOARD_URL=$(python3 -c "from urllib.parse import quote; import os; print('https://semgrep.dev/manage/findings?repo=' + quote(os.environ['SEMGREP_REPO_NAME'], safe='') + '&tab=findings&ref_type=branch&ref=' + quote(os.environ['REPO_BRANCH'], safe=''))")
            echo "View Result at Semgrep Dashboard: $DASHBOARD_URL"

            # Semgrep Exclude files
            dos2unix .semgrepignore
            SEMGREP_EXCLUDE=$(sed "/^#/d" .semgrepignore | sed "/^:/d" | sed -r '/^\s*$/d' | sed ':a;N;$!ba;s/\n/ --exclude /g')
            echo "Excluding Semgrep Files: --exclude $SEMGREP_EXCLUDE"
            # Generate xml file
            semgrep --config="p/r2c-ci" --config="p/r2c-security-audit" --config="p/bandit" --error --strict --timeout=0 --junit-xml -o /root/project/test-results/semgrep-scan.xml --exclude $SEMGREP_EXCLUDE
      - store_artifacts:
          path: test-results
          destination: test-results
      - store_test_results:
          path: test-results

  test-unit:
    parameters:
      python-version:
        type: string
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: install deps
          command: |
            mkdir test-results || true
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
            source $HOME/.poetry/env
            poetry install
            poetry run pytest --junitxml=test-results/results.xml --cov=solnlib --cov-report=html tests
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - store_artifacts:
          path: htmlcov

  test-splunk:
    parameters:
      splunk-version:
        type: string
      python-version:
        type: string
    docker:
      - image: circleci/python:3.7.4
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run:
          name: Install Splunk
          command: |
            pip install --user git+https://github.com/pixelb/crudini
            export SPLUNK_PRODUCT=splunk
            export SPLUNK_VERSION=$(crudini --get deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf "<<parameters.splunk-version>>" VERSION)
            export SPLUNK_BUILD=$(crudini --get deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf "<<parameters.splunk-version>>" BUILD)
            export SPLUNK_SLUG=$SPLUNK_VERSION-SPLUNK_BUILD
            export SPLUNK_ARCH=x86_64
            export SPLUNK_LINUX_FILENAME=splunk-${SPLUNK_VERSION}-${SPLUNK_BUILD}-Linux-${SPLUNK_ARCH}.tgz
            export SPLUNK_BUILD_URL=https://download.splunk.com/products/${SPLUNK_PRODUCT}/releases/${SPLUNK_VERSION}/linux/${SPLUNK_LINUX_FILENAME}
            echo $SPLUNK_BUILD_URL
            export SPLUNK_HOME=/opt/splunk
            wget -qO /tmp/splunk.tgz ${SPLUNK_BUILD_URL}
            sudo tar -C /opt -zxf /tmp/splunk.tgz
            sudo cp -r examples/data/solnlib_demo $SPLUNK_HOME/etc/apps
            sudo cp -r solnlib $SPLUNK_HOME/etc/apps/solnlib_demo/bin/
            sudo mkdir -p $SPLUNK_HOME/etc/apps/Splunk_TA_test/default/
            sudo chown -R $USER:$USER /opt/splunk
            ls $SPLUNK_HOME/etc/apps/solnlib_demo/bin/
            echo -e "[user_info]\nUSERNAME=Admin\nPASSWORD=Chang3d"'!' | sudo tee -a /opt/splunk/etc/system/local/user-seed.conf
            echo 'OPTIMISTIC_ABOUT_FILE_LOCKING=1' | sudo tee -a /opt/splunk/etc/splunk-launch.conf
            sudo /opt/splunk/bin/splunk start --accept-license
      #- python/load-cache
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install deps
          command: |
            mkdir test-results || true
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
            source $HOME/.poetry/env
            poetry install
            SPLUNK_HOME=/opt/splunk/ poetry run pytest --junitxml=test-results/results.xml -v examples
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - store_artifacts:
          path: htmlcov

  publish-pypi:
    docker:
      - image: circleci/python:3.7
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - restore_cache:
          keys:
            - poetry-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Install Tools
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - run:
          name: Build
          command: |
            source $HOME/.poetry/env
            poetry install
            poetry run poetry-dynamic-versioning
            poetry publish --build -u ${TWINE_USERNAME} -p ${TWINE_PASSWORD}

workflows:
  main:
    jobs:
      - build
      - semgrep:
          context:
            - gdi-semgrep
          filters:
            branches:
              only: /.*/
      - test-unit:
          requires:
            - build
          matrix:
            parameters:
              python-version: ["3.7.4"]
          filters:
            branches:
              only: /.*/
      - test-splunk:
          requires:
            - build
          matrix:
            parameters:
              splunk-version: ["8.0", "8.1", "8.2"]
              python-version: ["3.7.4"]
          filters:
            branches:
              only: /.*/
      - approval-tag-alpha:
          type: approval
          filters:
            branches:
              only: develop
          requires:
            - test-unit
      - splunk-release/tag:
          name: tag-alpha
          tag_level: a
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          filters:
            branches:
              only: develop
          requires:
            - approval-tag-alpha
      - approval-tag-beta:
          requires:
            - tag-alpha
          type: approval
          filters:
            branches:
              only: develop
      - splunk-release/tag:
          name: tag-beta
          tag_level: b
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          requires:
            - approval-tag-beta
      - approval-merge-beta-to-main:
          requires:
            - tag-beta
          type: approval
          filters:
            branches:
              only: develop
      - splunk-release/merge-to-main:
          name: merge-beta-to-main
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          requires:
            - approval-merge-beta-to-main
          filters:
            branches:
              only: develop
      - splunk-release/tag:
          name: tag-candidate
          tag_level: candidate
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          filters:
            branches:
              only: main
      - approval-tag-final-major:
          type: approval
          requires:
            - tag-candidate
      - splunk-release/tag:
          name: tag-final-major
          tag_level: final -s major
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          requires:
            - approval-tag-final-major
      - approval-tag-final-minor:
          type: approval
          requires:
            - tag-candidate
      - splunk-release/tag:
          name: tag-final-minor
          tag_level: final -s minor
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          requires:
            - approval-tag-final-minor
      - approval-tag-final-patch:
          type: approval
          requires:
            - tag-candidate
      - splunk-release/tag:
          name: tag-final-patch
          tag_level: final -s patch
          gh_user: ${GH_USER}
          gh_token: ${GH_PAT}
          requires:
            - approval-tag-final-patch
  publish:
    jobs:
      - publish-pypi:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*.*$/
