name: CI

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [main, develop]

jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      matrix_supportedSplunk: ${{ steps.matrix.outputs.supportedSplunk }}
    steps:
      - uses: actions/checkout@v3
      - name: matrix
        id: matrix
        uses: splunk/addonfactory-test-matrix-action@v1

  fossa-scan:
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: run fossa anlyze and create report
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
          fossa analyze --debug
          fossa report attribution --format text > /tmp/THIRDPARTY
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
      - name: upload THIRDPARTY file
        uses: actions/upload-artifact@v3
        with:
          name: THIRDPARTY
          path: /tmp/THIRDPARTY
      - name: run fossa test
        run: |
          fossa test --debug
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}

  compliance-copyrights:
    name: Compliance Copyright Headers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check License Header
        uses: apache/skywalking-eyes@v0.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - uses: pre-commit/action@v3.0.0

  review_secrets:
    name: security-detect-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: false
          fetch-depth: "0"
      - name: Trufflehog Actions Scan
        uses: edplato/trufflehog-actions-scan@v0.9j-beta
        with:
          scanArguments: "--max_depth 30 -x .github/workflows/exclude-patterns.txt"

  semgrep:
    runs-on: ubuntu-latest
    name: security-sast-semgrep
    if: github.actor != 'dependabot[bot]'
    steps:
      - uses: actions/checkout@v3
      - name: Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_PUBLISH_TOKEN }}

  run-unit-tests:
    name: test-unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: run tests
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
          poetry run pytest --junitxml=test-results/results.xml tests/unit
      - uses: actions/upload-artifact@v3
        with:
          name: unit tests test-results
          path: test-results

  test-splunk:
    name: test-splunk
    runs-on: ubuntu-latest
    continue-on-error: true
    needs:
      - meta
    strategy:
      matrix:
        splunk: ${{ fromJson(needs.meta.outputs.matrix_supportedSplunk) }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Install Splunk
        run: |
          export SPLUNK_PRODUCT=splunk
          export SPLUNK_VERSION=${{ matrix.splunk.version }}
          export SPLUNK_BUILD=${{ matrix.splunk.build }}
          export SPLUNK_SLUG=$SPLUNK_VERSION-$SPLUNK_BUILD
          export SPLUNK_ARCH=x86_64
          export SPLUNK_LINUX_FILENAME=splunk-${SPLUNK_VERSION}-${SPLUNK_BUILD}-Linux-${SPLUNK_ARCH}.tgz
          export SPLUNK_BUILD_URL=https://download.splunk.com/products/${SPLUNK_PRODUCT}/releases/${SPLUNK_VERSION}/linux/${SPLUNK_LINUX_FILENAME}
          echo "$SPLUNK_BUILD_URL"
          export SPLUNK_HOME=/opt/splunk
          wget -qO /tmp/splunk.tgz "${SPLUNK_BUILD_URL}"
          sudo tar -C /opt -zxf /tmp/splunk.tgz
          sudo cp -r tests/integration/data/solnlib_demo $SPLUNK_HOME/etc/apps
          sudo cp -r solnlib $SPLUNK_HOME/etc/apps/solnlib_demo/bin/
          sudo mkdir -p $SPLUNK_HOME/etc/apps/Splunk_TA_test/default/
          sudo chown -R "$USER":"$USER" /opt/splunk
          ls $SPLUNK_HOME/etc/apps/solnlib_demo/bin/
          echo -e "[user_info]\nUSERNAME=Admin\nPASSWORD=Chang3d"'!' | sudo tee -a /opt/splunk/etc/system/local/user-seed.conf
          echo 'OPTIMISTIC_ABOUT_FILE_LOCKING=1' | sudo tee -a /opt/splunk/etc/splunk-launch.conf
          sudo /opt/splunk/bin/splunk start --accept-license
          sudo /opt/splunk/bin/splunk set servername custom-servername -auth admin:Chang3d!
          sudo /opt/splunk/bin/splunk restart
      - name: Run tests
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
          SPLUNK_HOME=/opt/splunk/ poetry run pytest --junitxml=test-results/results.xml -v tests/integration
      - uses: actions/upload-artifact@v3
        with:
          name: test-splunk test-results
          path: test-results

  publish:
    name: Build Release
    needs:
      - fossa-scan
      - compliance-copyrights
      - pre-commit
      - review_secrets
      - semgrep
      - run-unit-tests
      - test-splunk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false
          # Very important: semantic-release won't trigger a tagged
          # build if this is not set false
          persist-credentials: false
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
          poetry build
      - name: Semantic Release
        uses: splunk/semantic-release-action@v1.3
        with:
          extra_plugins: |
            @google/semantic-release-replace-plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
